clinicaldata <- cbind(clinicaldata, encoded_gender)
row_names <- rownames(data)
Age <- clinicaldata[match(row_names,clinicaldata$sample_id),
"Age"]
GenderM <- clinicaldata[match(row_names,clinicaldata$sample_id),
c("GenderM")]
clinicaldata_info <- cbind(Age, GenderM)
condition <- factor(clinicaldata[match(row_names,clinicaldata$sample_id),
"Gensini_bin"])
data_logit <- getProp(sce_norm_sub,
feature = "mg_cell_type_distinct", imageID = "sample_id", logit = T)
colnames(data_logit) <- paste0(colnames(data_logit), "_logit")
# colnames(data) <- paste0(colnames(data), "_prop")
colnames(dat_prop) <- colnames(data)
t <- assay(sce_norm_sub, 'norm') %>%
t() %>%
as.data.frame()
t$sample_id <- sce_norm_sub$sample_id
data_mean <- t %>%
dplyr::group_by(sample_id) %>%
dplyr::summarise_at(vars(useMarkers), mean) %>%
dplyr::select(-sample_id) %>%
as.data.frame()
data_median <- t %>%
group_by(sample_id) %>%
summarise_at(vars(useMarkers), median) %>%
dplyr::select(-sample_id) %>%
as.data.frame()
rownames(data_mean) <- clinicaldata$sample_id
rownames(data_median) <- clinicaldata$sample_id
colnames(data_mean) <- paste0(colnames(data_mean), "_mean")
colnames(data_median) <- paste0(colnames(data_median), "_median")
sce_3_norm_sub <- sce_3_norm[, sce_3_norm$clusters != "other"]
sce_3_norm_sub <- sce_3_norm_sub[, sce_3_norm_sub$clusters != ""]
sce_3_norm_sub$clusters <- droplevels(sce_3_norm_sub$clusters)
data_3 <- getProp(sce_3_norm_sub,
feature = "clusters", imageID = "sample_id", logit = F)
data_3 <- 2*asin(sqrt(data_3))
colnames(data_3) <- janitor::make_clean_names(colnames(data_3))
clinicaldata_3 <- colData(sce_3_norm_sub) %>%
as.data.frame() %>%
dplyr::select(sample_id, Gensini_bin) %>%
distinct()
# clinicaldata_3$Gensini_bin <- factor(if_else(clinicaldata_3$Gensini > 0, 1, 0))
# encoded_gender_3 <- model.matrix(~Gender-1, data=clinicaldata_3)
# clinicaldata_3 <- cbind(clinicaldata_3, encoded_gender_3)
row_names_3 <- rownames(data_3)
# Age <- clinicaldata_3[match(row_names_3,clinicaldata_3$sample_id),
#                                       "Age"]
# GenderM <- clinicaldata_3[match(row_names_3,clinicaldata_3$sample_id),
#                                       c("GenderM")]
#
# clinicaldata_info_3 <- cbind(Age, GenderM)
data_3_logit <- getProp(sce_3_norm_sub,
feature = "clusters", imageID = "sample_id", logit = T)
condition_3 <- factor(clinicaldata_3[match(row_names_3,clinicaldata_3$sample_id),
"Gensini_bin"])
colnames(data_3_logit) <- paste0(colnames(data_3_logit), "_logit")
# colnames(data_3) <- paste0(colnames(data_3), "_prop")
t_3 <- assay(sce_3_norm_sub, 'norm') %>%
t() %>%
as.data.frame()
t_3$sample_id <- sce_3_norm_sub$sample_id
t_3_mean <- t_3 %>%
group_by(sample_id) %>%
summarise_at(vars(useMarkers), mean) %>%
dplyr::select(-sample_id) %>%
as.data.frame()
t_3_median <- t_3 %>%
group_by(sample_id) %>%
summarise_at(vars(useMarkers), median) %>%
dplyr::select(-sample_id) %>%
as.data.frame()
rownames(t_3_mean) <- clinicaldata_3$sample_id
rownames(t_3_median) <- clinicaldata_3$sample_id
colnames(t_3_mean) <- paste0(colnames(t_3_mean), "_mean")
colnames(t_3_median) <- paste0(colnames(t_3_median), "_median")
coldat <- colData(sce_norm) %>%
as.data.frame()
# Protein mean per cell type
markerDf =
coldat |>
dplyr::select(sample_id, mg_cell_type_distinct) |>
cbind(data.frame(t(assay(sce_norm, "norm")))) |>
dplyr::select(sample_id, mg_cell_type_distinct,useMarkers) %>%
dplyr::filter(mg_cell_type_distinct != "") %>%
dplyr::filter(mg_cell_type_distinct != "other")
# Mean marker per cell type
markerMeanCellType = markerDf |>
group_by(sample_id, mg_cell_type_distinct) |>
summarise_at(vars(-group_cols()), mean, na.rm = TRUE) |>
pivot_longer(-c(sample_id, mg_cell_type_distinct), names_to = "markers") |>
pivot_wider(names_from = c(mg_cell_type_distinct, markers), values_from = value) |>
column_to_rownames("sample_id") %>%
replace(is.na(.), 0)
# medians <- apply(markerMeanCellType, 2, median)
# mad_values <- apply(markerMeanCellType, 2, mad_scaled)
#
# markerMeanCellType <- sweep(markerMeanCellType, 2, medians, FUN = "-")
# markerMeanCellType <- sweep(markerMeanCellType, 2, mad_values, FUN = "/")
coldat_3 <- colData(sce_3_norm) %>%
as.data.frame()
# Protein mean per cell type
markerDf_3 =
coldat_3 |>
dplyr::select(sample_id, clusters) |>
cbind(data.frame(t(assay(sce_3_norm, "norm")))) |>
dplyr::select(sample_id, clusters, useMarkers) %>%
dplyr::filter(clusters != "") %>%
dplyr::filter(clusters != "other")
# Mean marker per cell type
markerMeanCellType_3 = markerDf_3 |>
group_by(sample_id, clusters) |>
summarise_at(vars(-group_cols()), mean, na.rm = TRUE) |>
pivot_longer(-c(sample_id, clusters), names_to = "markers") |>
pivot_wider(names_from = c(clusters, markers), values_from = value) |>
column_to_rownames("sample_id") %>%
replace(is.na(.), 0)
# medians_3 <- apply(markerMeanCellType_3, 2, median)
# mad_values_3 <- apply(markerMeanCellType_3, 2, mad_scaled)
#
# markerMeanCellType_3 <- sweep(markerMeanCellType_3, 2, medians_3, FUN = "-")
# markerMeanCellType_3 <- sweep(markerMeanCellType_3, 2, mad_values_3, FUN = "/")
root <- Node$new("Root")
myeloid <- root$AddChild('Myeloid_logit')
`14+ monos` <- myeloid$AddChild('14+ monos_logit')
`16+ monos` <- myeloid$AddChild('16+ monos_logit')
pDCs <- myeloid$AddChild('pDCs_logit')
`CD141+ DCs` <- myeloid$AddChild('CD141+ DCs_logit')
`CD1c+ DCs` <- myeloid$AddChild('CD1c+ DCs_logit')
NK <- root$AddChild('NK_logit')
`B cells` <- root$AddChild('B cells_logit')
CD3 <- root$AddChild('CD3_logit')
CD8hi <- CD3$AddChild('CD8hi_logit')
CD8lo <- CD3$AddChild('CD8lo_logit')
CD4 <- CD3$AddChild('CD4_logit')
`CD4+ Tconv` <- CD4$AddChild('CD4+ Tconv_logit')
`CD4+ Treg` <- CD4$AddChild('CD4+ Treg_logit')
# other <- root$AddChild('other_logit')
# d_logit <- coop::pcor(data_logit) %>%
#   cor2dist() %>%
#   as.dist()
# hc_logit <- hclust(d_logit, method = 'ward')
# hc_logit <- mhca::fixNonMonotHca(hc_logit)
# Extract clusters from the dendrogram
hc_logit <- treekoR:::findChildren(ggtree(as.phylo(root),
ladderize = F, layout = 'dendrogram'))
# Extract clusters and assign group numbers
subs_logit <- hc_logit$data$clusters
logit_dat <- hc_logit$data
logit_dat$group <- 1:length(subs_logit)
nclust <- ncol(data)
# Prepare variable groups for overlapping group Lasso
var_groups<- list()
n <- length(subs_logit)
# n2 <- 2*n
for(i in 1:length(subs_logit)){
var_groups[[i]] <- which(janitor::make_clean_names(colnames(data_logit)) %in%
janitor::make_clean_names(subs_logit[[i]]))
# var_groups[[i+n]] <- which(make_clean_names(colnames(data_logit)) %in%
#                              make_clean_names(subs_logit[[i]])) + nclust
}
celltypes <- unique(df_norm$clusters)
celltypes <- celltypes[celltypes != ""]
celltypes <- celltypes[celltypes != "other"]
last_max <- 11
off_set <- length(var_groups)
for (i in 1:ncol(markerMeanCellType)) {
index <- off_set + i  # Calculate the new index in the list
begin <- last_max + 1        # Start the next sequence right after the last max
end <- begin # Each sublist has exactly 27 items
# Add the new sequence to the res list at the new index
var_groups[[index]] <- seq(begin, end)
# Update last_max for the next iteration
last_max <- end
}
# var_groups[off_set + 1] <- list(seq(last_max + 1, ncol(markerMeanCellType) + last_max))
# Combine all input data matrices
X_train <- cbind(data_logit, markerMeanCellType)
# colnames(X_train) <- janitor::make_clean_names(colnames(X_train))
# Scale the combined data
scaleVals <- preProcess(X_train, method = c('range'))
X_train <- predict(scaleVals, X_train) %>%
as.matrix()
# X_train[, 1:nclust] <- X_train[, 1:nclust]/nclust
# X_train[, (nclust+1):ncol(markerMeanCellType)] <- X_train[, (nclust+1):ncol(markerMeanCellType)]/(nclust*length(markerMeanCellType))
# Extract response variable
y_train <- condition %>%
as.numeric()
X_test_study_3 <- cbind(data_3_logit, markerMeanCellType_3) %>%
as.matrix()
# colnames(X_test_study_3) <- janitor::make_clean_names(colnames(X_test_study_3))
X_test_study_3 <- predict(scaleVals, X_test_study_3)
# X_test_study_3[, 1:nclust] <- X_test_study_3[, 1:nclust]/nclust
# X_test_study_3[, (nclust+1):ncol(markerMeanCellType)] <- X_test_study_3[, (nclust+1):ncol(markerMeanCellType)]/(nclust*length(markerMeanCellType))
alpha_search = seq(0.01, 0.1, 0.01)
res_aic <- selectApha(X_train, y_train, alpha_search = alpha_search,
groups = var_groups, penalty = 'grMCP', seed = 1994)
alpha <- alpha_search[computeElbow(res_aic$aics)]
cvfit <- cv.grpregOverlap(X_train, y_train, var_groups, penalty = 'grMCP',
seed = 1994,
family = 'binomial',  alpha = alpha, nfolds = 10)
# Plot cross-validation results]
par(mfrow=c(2,2))
plot(cvfit, type = "all")
# Fit overlapping group Lasso model
fit <- grpregOverlap(X_train, y_train, var_groups, penalty = 'grMCP',
family='binomial', alpha = alpha,
returnX.latent = T, returnOverlap = FALSE,
lambda = cvfit$lambda.min)
# fit <- res_aic$best_fit
pred_study_3 <- predict(fit, X = X_test_study_3,
type = "response")
write.csv(as.data.frame(pred_study_3),
'../auc_data/mg_model_auc_study_3.csv')
pred_study_3 <- prediction(pred_study_3, condition_3)
pred_study_3_perf <- ROCR::performance(pred_study_3, "tpr", "fpr")
plt_dat_3 = data.frame(
FPR = pred_study_3_perf@x.values[[1]],
TPR = pred_study_3_perf@y.values[[1]]
)
auc_perf_study_3 <- ROCR::performance(pred_study_3, measure = "auc")
auc_study_3 <- auc_perf_study_3@y.values[[1]]
# Generate AUC plot
ggplot(plt_dat_3, aes(x = FPR, y = TPR)) +
geom_line(colour = "blue") +
labs(x = pred_study_3_perf@x.name, y = pred_study_3_perf@y.name) +
geom_abline(slope = 1, intercept = 0) + theme_bw() +
theme(
plot.title = element_text(color="Black", size=16, face="bold", hjust = 0.5),
plot.subtitle = element_text(color = "red", size = 16, hjust = 0.5),
axis.title.x = element_text(color="Black", size=16),
axis.title.y = element_text(color="Black", size=16),
axis.text.y = element_text(size = 16),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, size = 16),
strip.text.x = element_text(size = 16),
legend.title = element_text(size=16), #change legend title font size
legend.text = element_text(size=16) #change legend text font size)
)  + ggtitle(paste("Overlap Group Lasso MG- Study 3 - AUC =", round(auc_study_3, 2)))
coefs <- coef(fit) %>%
as.matrix() %>%
as.data.frame()
coefs$feature <- rownames(coefs) %>%
janitor::make_clean_names()
res_mp <- MP_gLasso(fit = fit, group = fit$grp.vec, lambda.type = "min", sort.type = "max")
p <- plotOverlapTree(hc = hc_logit, coefs = coefs, type = 'logit',
data = res_mp$data, heatmap = F)
coefs$feature <- rownames(coefs)
coefs  <- coefs %>%
dplyr::filter(!feature %like% "logit")%>%
dplyr::filter(!feature %like% "(Intercept)")
coefs$Cell_Type <- gsub("_.*", "", coefs$feature)  # Remove everything after the underscore
coefs$Marker <- sub(".*_", "", coefs$feature)  # Remove everything before and including the underscore
# Pivot the data to wide format
coefs_wide <- coefs %>%
dplyr::select(Cell_Type, Marker, V1) %>%
pivot_wider(names_from = Cell_Type, values_from = V1) %>%
as.data.frame()
rownames(coefs_wide) <- coefs_wide$Marker
coefs_wide <- coefs_wide %>%
dplyr::select(-Marker)
colnames(coefs_wide) <- janitor::make_clean_names(colnames(coefs_wide))
gheatmap(p, data = t(coefs_wide), offset = 0.05, hjust = 1, colnames_offset_y = 0,
color = 'white',legend_title="Logit Proportions") +
# vexpand(.001, -1) +
theme(legend.title = element_text(color = "black", size = 10),
legend.text = element_text(color = "black", size = 10)) +
scale_fill_gradientn(colours = eval(formals(pheatmap::pheatmap)$color,
envir=environment(pheatmap::pheatmap)),
name = "Model Coefficient")
# colnames(data_logit) <- make_clean_names(colnames(data_logit))
# colnames(markerMeanCellType) <- make_clean_names(colnames(markerMeanCellType))
plotData <- data.frame(
Alpha = seq(0.01, 0.1, 0.01),
AIC = res_aic$aics[1:10]
)
ggpubr::ggline(
plotData,
x = "Alpha", y = 'AIC', group = 1, color = "steelblue"
) +
geom_vline(xintercept = alpha*100, linetype = 1, color = "red") +
labs(
y = "AIC", x = "Alpha",
title = "Optimal Alpha using the elbow method"
) +
theme(
plot.title = element_text(
color = "Black", size = 14, face = "bold", hjust = 0.5
),
axis.title.x = element_text(color = "Black", size = 14, face = "bold"),
axis.title.y = element_text(color = "Black", size = 14, face = "bold")
)
scater::plotGroupedHeatmap(sce_norm,
features = useMarkers,
group = "mg_cell_type_distinct",
block = "mg_cell_type_distinct",
exprs_values = "norm",
center = TRUE,
scale = TRUE,
zlim = c(-2,2),
cluster_rows = FALSE)
coefs_sub <- coefs %>%
dplyr::filter(V1 != 0)
sig_features <- markerMeanCellType %>%
dplyr::select(coefs_sub$feature) %>%
mutate(sample_id = as.integer(rownames(.))) %>%
left_join(clinicaldata)
stats <- sig_features %>%
group_by(Gensini_bin) %>%
dplyr::select(coefs_sub$feature) %>%
# dplyr::select(-sample_id) %>%
as.data.frame() %>%
melt() %>%
mutate(feature = variable) %>%
group_by(feature) %>%
t_test(value ~ Gensini_bin) %>%
adjust_pvalue(method = "bonferroni") %>%
add_significance("p.adj") %>%
add_xy_position(x = 1, dodge = 0.0) %>%
filter(p.adj < 0.05)
# CCR2 (OR 1.12), CCR4 (OR 1.08), CD38 and CD45RO (OR 1.13), HLA-DR (OR 1.06), and Ki67 (1.22)
sig_features %>%
group_by(Gensini_bin) %>%
dplyr::select(stats$feature) %>%
# dplyr::select(-sample_id) %>%
as.data.frame() %>%
melt() %>%
mutate(feature = variable) %>%
ggboxplot(x = 'Gensini_bin', y = 'value',
color = 'Gensini_bin', palette = 'jco',
facet.by = 'feature', scale = 'free_y') +
labs(title = "") +
theme_minimal() +
theme_bw() +
theme(axis.text.x = element_text(size = 16),
plot.title = element_text(size = 20, hjust = 0.5),
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.title.x = element_text(size = 16),
legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
legend.position = 'None',
strip.text.x = element_text(size = 16, colour = "black", face = 'bold')
) + stat_pvalue_manual(
stats,  label = "p.adj.signif", tip.length = 0,
size = 6, color = 'red'
) + scale_y_continuous(expand = expansion(mult = c(0, 0.1)))
coefs_sub <- coefs %>%
dplyr::filter(V1 != 0)
sig_features_test <- markerMeanCellType_3 %>%
dplyr::select(coefs_sub$feature) %>%
mutate(sample_id = as.integer(rownames(.))) %>%
left_join(clinicaldata_3) %>%
mutate(Gensini_bin = as.character(Gensini_bin))
stats_test <- sig_features_test %>%
group_by(Gensini_bin) %>%
dplyr::select(coefs_sub$feature) %>%
# dplyr::select(-sample_id) %>%
as.data.frame() %>%
melt() %>%
mutate(feature = variable) %>%
group_by(feature) %>%
t_test(value ~ Gensini_bin) %>%
adjust_pvalue(method = "bonferroni") %>%
add_significance("p.adj") %>%
add_xy_position(x = 1, dodge = 0.0)   %>%
filter(p.adj < 0.05)
if(nrow(stats_test) > 0 ){
sig_features_test %>%
group_by(Gensini_bin) %>%
dplyr::select(stats_test$feature) %>%
# dplyr::select(-sample_id) %>%
as.data.frame() %>%
melt() %>%
mutate(feature = variable) %>%
ggboxplot(x = 'Gensini_bin', y = 'value',
color = 'Gensini_bin', palette = 'jco',
facet.by = 'feature', scale = 'free_y') +
labs(title = "") +
theme_minimal() +
theme_bw() +
theme(axis.text.x = element_text(size = 16),
plot.title = element_text(size = 20, hjust = 0.5),
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.title.x = element_text(size = 16),
legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
legend.position = 'None',
strip.text.x = element_text(size = 16, colour = "black", face = 'bold')
) + stat_pvalue_manual(
stats_test,  label = "p.adj.signif", tip.length = 0,
size = 6, color = 'red'
) + scale_y_continuous(expand = expansion(mult = c(0, 0.1)))
}
coefs <- coef(fit) %>%
as.matrix() %>%
as.data.frame()
coefs$feature <- rownames(coefs) %>%
janitor::make_clean_names()
coefs_logit <- coefs %>%
filter(feature %like% 'logit') %>%
filter(V1 != 0)
colnames(data_logit) <- janitor::make_clean_names(colnames(data_logit))
sig_features_logit <- data_logit %>%
dplyr::select(coefs_logit$feature) %>%
mutate(sample_id = as.integer(rownames(.))) %>%
left_join(clinicaldata)
stats_logit <- sig_features_logit %>%
group_by(Gensini_bin) %>%
dplyr::select(coefs_logit$feature) %>%
# dplyr::select(-sample_id) %>%
as.data.frame() %>%
melt() %>%
mutate(feature = variable) %>%
group_by(feature) %>%
t_test(value ~ Gensini_bin) %>%
adjust_pvalue(method = "bonferroni") %>%
add_significance("p.adj") %>%
add_xy_position(x = 1, dodge = 0.0)
sig_features_logit %>%
group_by(Gensini_bin) %>%
dplyr::select(coefs_logit$feature) %>%
# dplyr::select(-sample_id) %>%
as.data.frame() %>%
melt() %>%
mutate(feature = variable) %>%
ggboxplot(x = 'Gensini_bin', y = 'value',
color = 'Gensini_bin', palette = 'jco',
facet.by = 'feature', scale = 'free_y') +
labs(title = "") +
theme_minimal() +
theme_bw() +
theme(axis.text.x = element_text(size = 16),
plot.title = element_text(size = 20, hjust = 0.5),
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.title.x = element_text(size = 16),
legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
legend.position = 'None',
strip.text.x = element_text(size = 16, colour = "black", face = 'bold')
) + stat_pvalue_manual(
stats_logit,  label = "p.adj.signif", tip.length = 0,
size = 6, color = 'red'
) + scale_y_continuous(expand = expansion(mult = c(0, 0.1)))
colnames(data_3_logit) <- janitor::make_clean_names(colnames(data_3_logit))
sig_features_logit_test <- data_3_logit %>%
dplyr::select(coefs_logit$feature) %>%
mutate(sample_id = as.integer(rownames(.))) %>%
left_join(clinicaldata_3) %>%
mutate(Gensini_bin = as.character(Gensini_bin))
stats_logit_test <- sig_features_logit_test %>%
group_by(Gensini_bin) %>%
dplyr::select(coefs_logit$feature) %>%
# dplyr::select(-sample_id) %>%
as.data.frame() %>%
melt() %>%
mutate(feature = variable) %>%
group_by(feature) %>%
t_test(value ~ Gensini_bin) %>%
adjust_pvalue(method = "bonferroni") %>%
add_significance("p.adj") %>%
add_xy_position(x = 1, dodge = 0.0)
sig_features_logit_test %>%
group_by(Gensini_bin) %>%
dplyr::select(coefs_logit$feature) %>%
# dplyr::select(-sample_id) %>%
as.data.frame() %>%
melt() %>%
mutate(feature = variable) %>%
ggboxplot(x = 'Gensini_bin', y = 'value',
color = 'Gensini_bin', palette = 'jco',
facet.by = 'feature', scale = 'free_y') +
labs(title = "Study 3") +
theme_minimal() +
theme_bw() +
theme(axis.text.x = element_text(size = 16),
plot.title = element_text(size = 20, hjust = 0.5),
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.title.x = element_text(size = 16),
legend.text = element_text(size = 16),
legend.title = element_text(size = 16),
legend.position = 'None',
strip.text.x = element_text(size = 16, colour = "black", face = 'bold')
) + stat_pvalue_manual(
stats_logit_test,  label = "p.adj.signif", tip.length = 0,
size = 6, color = 'red'
) + scale_y_continuous(expand = expansion(mult = c(0, 0.1)))
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
fit.control <- trainControl(method = "repeatedcv", number = 5, repeats = 3, allowParallel = TRUE)
set.seed(1994)
fit <- train(clusters ~ ., data = df_norm_sub, method = "qda", trControl = fit.control, trace = TRUE)
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
fit.control <- trainControl(method = "repeatedcv", number = 5, repeats = 3, allowParallel = TRUE)
set.seed(1994)
fit <- train(clusters ~ ., data = df_norm_sub, method = "xgbLinear", trControl = fit.control, trace = TRUE)
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
fit.control <- trainControl(method = "repeatedcv", number = 5, repeats = 3, allowParallel = TRUE)
set.seed(1994)
fit <- train(clusters ~ ., data = df_norm_sub, method = "lssvmLinear", trControl = fit.control, trace = TRUE)
gc()
stopCluster(cluster)
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
fit.control <- trainControl(method = "repeatedcv", number = 5, repeats = 3, allowParallel = TRUE)
set.seed(1994)
fit <- train(clusters ~ ., data = df_norm_sub, method = "multinom", trControl = fit.control, trace = TRUE)
